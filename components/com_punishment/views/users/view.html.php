<?php

/**
 * Class PunishmentViewUsers
 *
 * Date: 07.11.13
 * Time: 14:33
 * @author Thomas JouÃŸen <tjoussen@databay.de>
 */
//No direct access to this file
defined("_JEXEC") or die("Restricted Access");

//import Joomla libary
jimport("joomla.application.component.view");
class PunishmentViewUsers extends JView
{
	/**
	 * @var JObject
	 */
	protected $canDo;

	public function __construct($config = array())
	{
		parent::__construct($config); // TODO: Change the autogenerated stub

		$this->loadHelper("punishment");
		$this->canDo = PunishmentHelper::getActions();
	}

	function display($tpl = null)
	{
		if($this->canDo->get('users.show'))
		{
			$this->checkForResets();
			$this->items = $this->get("Items");
			$this->pagination = $this->get("Pagination");

			parent::display($tpl);
		}else{
			throw new Exception("Access denied", 404);
		}


	}

	protected function checkForResets()
	{
		$this->violationResets();
		$this->punishmentResets();
	}

	protected function punishmentResets()
	{
		$reset_date = new DateTime("-1 Wednesday");

		$db = JFactory::getDbo();
		$query = $db->getQuery(true);
		$query->update('#__punishment_user_punishment up')
			->set('up.expired = 1')
			->innerJoin('#__punishment p ON p.id = up.punishment_id')
			//->having('up.punishment_date <= ('.$db->quote($reset_date->format('Y-m-d')).' - INTERVAL p.duration WEEK)');
			->where('up.punishment_date <= DATE_SUB('.$db->quote($reset_date->format('Y-m-d')).', INTERVAL p.duration WEEK)');
		$db->setQuery($query)->execute();
	}

	protected function violationResets()
	{
		$configs = JComponentHelper::getParams("com_punishment");

		$reset_date = new DateTime("-1 Wednesday");
		$reset_threshold = clone $reset_date;
		$reset_threshold->add(DateInterval::createFromDateString("-" . $configs->get('reset_interval'). " Week"));

		$results = $this->getViolationStats($reset_threshold);

		$users_to_reset = array_filter($results, function($element){
			return ($element['violations'] == 0);
		});

		$user_ids = array();
		foreach($users_to_reset as $user_to_reset)
		{
			$user_ids[] = $user_to_reset['id'];
		}

		$db = JFactory::getDbo();
		$query = $db->getQuery(true);
		$query->update('#__punishment_user_violation')
			->set(array('expired = 1'))
			->where("user_id IN ('" . implode("','", $user_ids) . "')");
		$db->setQuery($query)->execute();

		$query = $db->getQuery(true);
		$query->insert('#__punishment_user_reset')
			->columns(array("user_id", "reset_date", "reset_type"));

		foreach($user_ids as $user_id)
		{
			$query->values($db->quote($user_id) . "," . $db->quote($reset_date->format('Y-m-d')) . ",'EXPIRED'");
		}

		$db->setQuery($query)->execute();
	}

	/**
	 * @param $reset_threshold
	 *
	 * @return array
	 */
	protected function getViolationStats($reset_threshold)
	{
		$db    = JFactory::getDbo();
		$query = $db->getQuery(true);
		$query->select('
			SUM(
				CASE WHEN uv.violation_date >=' . $db->quote($reset_threshold->format('Y-m-d')).'
				THEN 1
				ELSE 0
				END
			) violations, u.id, MAX(uv.violation_date) last_violation')
			  ->from('#__users u')
			  ->leftJoin('#__punishment_user_violation uv ON uv.user_id = u.id AND uv.expired = 0')
			  ->where('uv.id IS NOT NULL')
			  ->group(array('u.id'));

		return $db->setQuery($query)->loadAssocList();
}
}
 